<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd"
	>

	<!-- 
		RequestMappingHandlerMapping 
		BeanNameUrlHandlerMapping 
		RequestMappingHandlerAdapter 
		HttpRequestHandlerAdapter 
		SimpleControllerHandlerAdapter 
		ExceptionHandlerExceptionResolver 
		ResponseStatusExceptionResolver 
		DefaultHandlerExceptionResolver 
		上面几个Bean实例。这几个类都是用来做什么的呢？ 
		
		前两个是HandlerMapping接口的实现类，用来处理请求映射的。
		其中第一个是处理@RequestMapping注解的。
		第二个会将controller类的名字映射为请求url。 
		中间三个是用来处理请求的。具体点说就是确定调用哪个controller的哪个方法来处理当前请求。
		第一个处理@Controller注解的处理器，支持自定义方法参数和返回值（很酷）。
		第二个是处理继承HttpRequestHandler的处理器。第三个处理继承自Controller接口的处理器。 
		后面三个是用来处理异常的解析器。 
	-->

	<mvc:annotation-driven validator="validator">
		<mvc:return-value-handlers>
			<bean class="com.web.handler.EmployeesHandler"/>
		</mvc:return-value-handlers>
	</mvc:annotation-driven>
	
	
	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
	
	<property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
		<!--不设置则默认为classpath下的ValidationMessages.properties -->
		<property name="validationMessageSource" ref="validatemessageSource" />
	</bean>
	
	<bean id="validatemessageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basename" value="classpath:validatemessages" />
		<property name="fileEncodings" value="utf-8" />
		<property name="cacheSeconds" value="120" />
	</bean> 
	
	
	<!--错误处理  
	<bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="defaultErrorView">
			<value>/error/error</value>
		</property>
		<property name="defaultStatusCode">
			<value>500</value>
		</property>
		<property name="warnLogCategory">
			<value>org.springframework.web.servlet.handler.SimpleMappingExceptionResolver
			</value>
		</property>
	</bean>
	-->

	<!-- 静态资源访问 -->
	<mvc:resources mapping="/js/**" location="/js/" />
	<mvc:resources location="/res" mapping="/**"/>
	<!--
		DispatcherServlet靠ViewResolver把user解析为/WEB-INF/jsp/user.jsp
		InternalResourceViewResolver 是最常用的，该解析器可以返回指定目录下指定后缀的文件，它支持 JSP及JSTL等视图技术 
	-->
	<bean id="viewResolver"	class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/" />
		<property name="suffix" value=".jsp" />
	</bean>
	
	<!-- 
		上传文件拦截，设置最大上传文件大小   20M=10*1024*1024(B)=20971520 bytes 
	-->  
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  
	    <property name="maxUploadSize" value="20971520" />  
	</bean>

	<!--
		拦截器定义
	-->
	<mvc:interceptors>
		<bean id="executeTimeInterceptor" class="com.web.interceptor.ExecuteTimeInterceptor"></bean>
	</mvc:interceptors>
	
</beans>